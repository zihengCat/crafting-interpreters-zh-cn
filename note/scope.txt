Mostly following Scheme (R5RS):

- Accessing an undefined name is a runtime error. It is not a compile time
  error.

  (define (eval-foo) foo) ; OK, though foo is undefined.
  (eval-foo)              ; Runtime error.
  (define foo "ok")       ; Now foo is defined.
  (eval-foo)              ; Now it works.

  - Allows mutual recursion at the top level.
  - Does so in a way that's friendly to the REPL and incremental evaluation.

- Assigning to an undefined name is a runtime error. It is not a compile time
  error.

  (define (setbar) (set! bar "wat"))  ; OK, though bar is undefined.
  (setbar)                            ; Runtime error.
  (define bar "ok")                   ; Now bar is defined.
  (setbar)                            ; Now it works.

  - Avoids the mushiness of treating a typo in an assignment as "let's just
    create a new global variable", which is probably not what the user wants.

- Top level variables can be defined multiple times.

  (define foo "1")
  foo               ; 1
  (define foo "2")  ; OK.
  foo               ; 2

  - REPL friendly.

- A variable is not in scope in its own initializer. It is declared after its
  initializer is run.

  (define foo foo) ; Error: foo is not defined.

  (define bar "outer")
  (let ((bar bar)) bar) ; "outer"

  (define baz 1)
  (define baz (+ baz 1))  ; Refer to previous definition of baz.
  baz                     ; 2

  - This is different from classes and functions, but that's probably OK.

  - If we want it to be a compile error for a local to be in scope in its own
    initializer, we'd need some sort of resolving step in jvox.

  - If we want it to be a runtime error, that error would always occur, so it
    feels weird to defer that. And it would make cvox slower, or require us to
    emit some special case "always throw runtime error here" code.
